from collections import deque

dq = deque()
"""существует структура данных deque (читается как «дек», 
англ. double-ended queue — двухконцевая очередь). 
Она объединяет в себе возможности и стека, 
и очереди: содержит функции, которые позволяют добавлять элементы 
в начало или в конец очереди, а также извлекать первый или последний элемент из неё. 

У deque есть четыре ключевые функции:

    append (добавить элемент в конец дека);
    appendleft (добавить элемент в начало дека);
    pop (удалить и вернуть элемент из конца дека);
    popleft (удалить и вернуть элемент из начала дека);
    reverse (позволяет поменять порядок элементов в очереди на обратный);
    rotate (переносит N заданных элементов из конца очереди в начало, отрицательное значение
    аргумента переносит элементы из начала в конец);
    index (позволяет найти первый индекс искомого элемента);
    count (позволяет подсчитать, сколько раз элемент встретился в очереди)
    clear (позволяет очистить очередь)
    
    
    С помощью pop всегда удаляется последний элемент из дэка. 
    Чтобы удалить конкретный элемент по индексу, необходимо 
    воспользоваться встроенной конструкцией del
    
    del clients[2]
    
    Также в очередь возможно добавить сразу несколько элементов 
    из итерируемого объекта в дек. Для этого используют функции extend (добавить в конец дека)
    и extendleft (добавить в начало дека).
    
    В скобках передаём список при создании deque,
    чтобы сразу добавить все его элементы в очередь
    
    shop = deque([1, 2, 3, 4, 5])
    shop.extend([11, 12, 13, 14, 15, 16, 17])
    shop.extendleft([11, 12, 13, 14, 15, 16, 17])
    
    print(shop)
    # deque([17, 16, 15, 14, 13, 12, 11, 1, 2, 3, 4, 5])
    Обратите внимание, что «клиенты из автобуса» оказались в очереди не в том порядке, 
    в каком они «выходили из автобуса». То есть добавленные номера не только приписаны 
    перед записанными в очереди номерами, но также порядок добавленных элементов 
    поменялся на обратный. Это связано с тем, что действие функции extendleft 
    аналогично многократному применению функции appendleft, 
    поэтому самый последний клиент из автобуса оказался в итоге первым в очереди.
"""

print(dq)

clients = deque()
clients.append('Ivanov')
clients.append('Petrov')
clients.append('Smirnov')
clients.append('Tikhonova')
print(clients) # deque(['Ivanov', 'Petrov', 'Smirnov', 'Tikhonova'])


limited = deque(maxlen=3)
print(limited)
# deque([], maxlen=3)
 
limited_from_list = deque([1,3,4,5,6,7], maxlen=3)
print(limited_from_list)
# deque([5, 6, 7], maxlen=3)

"""При создании очереди можно также указать её максимальную длину 
с помощью параметра maxlen. Сделать это можно как при создании пустой очереди, 
так и при создании очереди от заданного итерируемого объекта
в очереди с ограниченной длиной сохраняются только последние элементы, 
а первые исчезают из памяти"""